#Some global setting
#--------------------------------------------
DSECRIPTION: 'Inverse a baby image into a latent code.'
NAME: 'Inverse_ProGAN_GAN_MSGAN_ACGAN_start-with-code'
TRAINER: 'inverse2'
USE_GPU: True
NUM_GPU: 4


# GPU settings
#--------------------------------------------
GPU_CONFIG:
        mode: 'gpu'                           # 'gpu' or 'cpu'
        use_multi_GPU: True                   # 'True'->multi GPUs; 'False'->single GPU
        n_GPUs: 2                             # how many GPUs can be used; value > 1



# Logging settings
#--------------------------------------------
LOG_CONFIG:
        mode: 'Logger+Tfboard'               #'Logging', 'Tfboard', 'Logging+Tfboard'
        tb:
                task: '001'
                tb_path: './tensorboard'              #Save path of tensorboard
        logger:
                name: 'Inverse_start-with-code'
                logger_path: './logging/baby_Inverse_ProGAN_GAN_MSGAN_ACGAN_start-with-code.log'     #Save path of system logging output
        # Customized parameters can be added here

# Dataset settings
#--------------------------------------------
DATASET_CONFIG:
        root_dir: '../Datasets/BABY/'                #Base dir path of dataset
        glob_mode: 'custome'                  #'auto', 'custome'. How to glob files. 'auto' means auto detect files.
        read_mode: 'imageio'                  #'imageio', 'cv2'  
        package: 'Data_zoo'
        dataset:
                #Parameters of specific dataset, should be defined by user.
                name: 'inverse2'                           #Choose which file as the dataloader file, it should be implemented in 'dataloaders'.
                ext: '.png'                           #Ext of files that asked to be loaded.
                phase: 'train'                        #Three phase: 'train', 'val', 'test'
                


# Loss settings
#--------------------------------------------



# Optimizer settings (include schedular)
#--------------------------------------------
OPTIMIZER:
        lr_encoder: 0.0001
        lr_D: 0.0001
        decay: 10
        decay_epoch: 100
        Adam:
                weight_decay: 0
                beta1: 0.5
                beta2: 0.999
                eps: 0.00000001



# Model settings
#--------------------------------------------
MODEL:
        package: "Models"
        name: ['inverse', 'pggan_generator']
        checkpoint:
                ckp_flag: False
                ckp_path: ['./ckp/G2/Net_Batchsize_128_Epoch_70.pth', './ckp/D2/Net_Batchsize_128_Epoch_70.pth']
                save_path: ['./ckp/Inverse_ProGAN_GAN_MSGAN_ACGAN_start-with-code_enc', './ckp/Inverse_ProGAN_GAN_MSGAN_ACGAN_start-with-code_dis']
                save_per_epoch: 2
        vgg:
                pre_train: True
                requires_grad: False
                use_vae: False
                global_pooling: True
                if_downsample: False
                output_dim: 480
        
        pggan:
                model_name: 'pggan_baby'

        D:
                imgsize: 128
                input_channel: 3
                ndf: 16
                channel_multiplier: 2
                use_sigmoid: True
                use_sn: False


# Trainning settings
#--------------------------------------------
TRAIN:
        batch_size: 32
        num_workers: 8
        epochs: 250
        weight_mse: 1.0
        weight_vgg: 1.0
        weight_latent: 0.01
        weight_gan: 1.0
        save_iter: 100
        guassian_dim: 480
        uniform_dim: 28

# Testing settings
#--------------------------------------------
